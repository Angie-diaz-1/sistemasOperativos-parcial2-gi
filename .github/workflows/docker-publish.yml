name: Build, Scan, Push and Verify Docker Image

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-verify:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: 🗕️ Checkout repository
        uses: actions/checkout@v4

      - name: 🧪 Run unit tests and generate coverage
        run: |
          go test ./... -coverpkg=./controller,./service -coverprofile=coverage.out
          go tool cover -func=coverage.out

          echo "✅ Validando cobertura mínima"
          threshold=50.0
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Cobertura actual: $coverage%"
          awk "BEGIN {exit ($coverage < $threshold) ? 1 : 0}"

      - name: 🩱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 📌 Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: 🛠️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            angiediazz/p-go-get:latest
            angiediazz/p-go-get:${{ steps.version.outputs.VERSION }}
            ghcr.io/angie-diaz-1/p-go-get:latest
            ghcr.io/angie-diaz-1/p-go-get:${{ steps.version.outputs.VERSION }}

      - name: 🔍 Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: angiediazz/p-go-get:latest
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: 🍃 Insertar usuario directamente en MongoDB antes de ejecutar endpoints
        run: |
          echo "📦 Insertando documento de prueba en MongoDB"
          mongo_container=$(docker ps -qf "ancestor=mongo:6.0")
          docker exec "$mongo_container" mongosh --quiet --eval '
            db = connect("mongodb://localhost:27017/users_db");
            db.users.insertOne({
              name: "nieve",
              lastname: "gatita blanca",
              email: "nieve@example.com",
              password: "654321"
            });
          '
      - name: 🚀 Run container github and test get workflow
        run: |
          docker run -d --name test-container --network host ghcr.io/angie-diaz-1/p-go-get:latest

          echo "⏳ Esperando que arranque el contenedor..."
          sleep 10

          echo "📋 Mostrando contenedores activos:"
          docker ps

          echo "📱 Logs del contenedor:"
          docker logs test-container || true

          echo "🌐 Verificando endpoint de salud"
          response=$(curl --retry 5 --retry-delay 3 --fail --silent http://localhost:8080/health/)
          echo "Respuesta: $response"

          if [[ "$response" != *'"message":"Hola Docker!"'* ]]; then
            echo "❌ La respuesta no es válida."
            docker stop test-container
            docker rm test-container
            exit 1
          fi

          echo "✅ Healthcheck exitoso."

          echo "📥 GET a /users"
          response=$(curl --silent --fail http://localhost:8080/users)
          echo "📄 Respuesta completa: $response"

          user_id=$(echo "$response" | grep -oP '"id"\s*:\s*"\K[^"]+')
          if [ -z "$user_id" ]; then
            echo "❌ No se pudo obtener un ID válido desde /get"
            docker stop test-container && docker rm test-container
            exit 1
          fi
          echo "✅ ID obtenido: $user_id"

          echo "📥 GET a /users/$user_id"
          response_id=$(curl --silent --fail http://localhost:8080/users/$user_id)
          echo "📄 Respuesta: $response_id"

          if [[ "$response_id" != *"$user_id"* ]]; then
            echo "❌ La respuesta del GET por ID no contiene el ID esperado."
            docker stop test-container && docker rm test-container
            exit 1
          fi
          echo "✅ GET por ID exitoso."
          docker stop test-container
          docker rm test-container


      - name: 🔖 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
